**Multiply/Divide by 2:
S<<1 = S*2
S>>2 = S/4
--------------------------------------------------
**Set/Turn on the j-th bit:           S |= (1<<j)
S = 34(base 10) = 100010(base 2)
j = 3, 1<<j     = 001000(base 2)
S |= (1<<j)     = 101010(base 2)
--------------------------------------------------
**Check if the j-th bit is on:        S &= (1<<j)
S = 42(base 10) = 101010(base 2)
j = 3, 1<<j     = 001000(base 2)
S &= (1<<j)        = 001000(base 2)
--------------------------------------------------
**Clear/Turn off the j-th bit:        S &= ~(1<<j)
S = 42(base 10) = 101010(base 2)
j = 1, ~(1<<j)  = 111101(base 2)
S &= ~(1<<j)    = 101000(base 2)
--------------------------------------------------
**Flip the j-th bit:                  S ^= (1<<j)
S = 40(base 10) = 101000(base 2)
j = 2, (1<<j)   = 000100(base 2)
S ^= (1<<j)     = 101100(base 2)
--------------------------------------------------
**Least Significant Bit:              T = (S&-S)
S  =  40(base 10) = 000...000101000
-S = -40(base 10) = 111...111011000
T  =   8(base 10) = 000...000001000 
--------------------------------------------------
**N bits on:                          S = (1<<n)-1
N = 3:                         
S + 1 = 8(base 10) = 1000
                    -   1
S     = 7(base 10) =  111
--------------------------------------------------
**To enumerate all proper subsets of a given a bitmask, e.g., if mask = (18)10 = (10010)2,
then its proper subsets are {(18)10 = (10010)2, (16)10 = (10000)2, (2)10 = (00010)2},
we can use:
int mask = 18;
for (int subset = mask; subset; subset = (mask & (subset-1)))
cout << subset << "\n";
--------------------------------------------------
**S mod(2^k):                         (S&((1<<k)-1))
S = 7(base 10) = 111(base 2)
k = 2, (1<<k)  = 100(base 2)
(S&((1<<k)-1)) = 011(base 2)
--------------------------------------------------
**Check if the number is power of 2:  !(S^(S&-S))
--------------------------------------------------
**Turn off the last 1 in S:         S ^= (S&-S)
--------------------------------------------------
**Turn on the last 0 in S:          S ^= ((~S)&-(~S))
--------------------------------------------------
**Turn off the last consecutive run of ones in S: S -= (((~S)&-(~S))-1)
--------------------------------------------------
**Turn on the last consecutive run of zeros in S: S += ((S&-S)-1)
**Functions:
__builtin_popcount(x): Number of bits on in x
__builtin_ctz(x): Number of trailing zeros in x
--------------------------------------------------
Problems:
-UVa 11173 - Grey Codes: n^(n>>1) 
